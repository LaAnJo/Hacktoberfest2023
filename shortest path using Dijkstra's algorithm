import heapq

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v, weight):
        if u not in self.graph:
            self.graph[u] = []
        self.graph[u].append((v, weight))

    def dijkstra(self, start):
        # Initialize distances to all nodes as infinity and the start node as 0.
        distances = {node: float('inf') for node in self.graph}
        distances[start] = 0

        # Priority queue to keep track of nodes to visit based on their distances.
        priority_queue = [(0, start)]

        while priority_queue:
            current_distance, current_node = heapq.heappop(priority_queue)

            # Skip if we've already found a shorter path to this node.
            if current_distance > distances[current_node]:
                continue

            for neighbor, weight in self.graph[current_node]:
                distance = current_distance + weight

                # If this path is shorter than the previously known distance, update it.
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(priority_queue, (distance, neighbor))

        return distances

# Example usage:
if __name__ == "__main__":
    graph = Graph()
    graph.add_edge('A', 'B', 1)
    graph.add_edge('A', 'C', 4)
    graph.add_edge('B', 'C', 2)
    graph.add_edge('B', 'D', 5)
    graph.add_edge('C', 'D', 1)
    graph.add_edge('D', 'A', 7)

    start_node = 'A'
    shortest_distances = graph.dijkstra(start_node)

    for node, distance in shortest_distances.items():
        print(f"Shortest distance from {start_node} to {node} is {distance}")
