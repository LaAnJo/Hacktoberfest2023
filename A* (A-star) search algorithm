import heapq

class Node:
    def __init__(self, row, col, cost, heuristic, parent=None):
        self.row = row
        self.col = col
        self.cost = cost
        self.heuristic = heuristic
        self.parent = parent

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

def astar_search(grid, start, end):
    rows, cols = len(grid), len(grid[0])
    open_set = []
    closed_set = set()

    start_node = Node(start[0], start[1], 0, 0)
    heapq.heappush(open_set, start_node)

    while open_set:
        current_node = heapq.heappop(open_set)

        if (current_node.row, current_node.col) == end:
            path = []
            while current_node:
                path.append((current_node.row, current_node.col))
                current_node = current_node.parent
            return path[::-1]

        closed_set.add((current_node.row, current_node.col))

        neighbors = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        for dr, dc in neighbors:
            r, c = current_node.row + dr, current_node.col + dc
            if 0 <= r < rows and 0 <= c < cols and grid[r][c] != 1 and (r, c) not in closed_set:
                cost = current_node.cost + 1
                heuristic = abs(r - end[0]) + abs(c - end[1])
                neighbor = Node(r, c, cost, heuristic, current_node)
                heapq.heappush(open_set, neighbor)

    return []

# Example usage:
if __name__ == "__main__":
    grid = [
        [0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 1, 1, 0],
        [0, 0, 0, 0, 0],
        [0, 1, 0, 1, 0]
    ]

    start = (0, 0)
    end = (4, 4)

    path = astar_search(grid, start, end)

    if path:
        print("Shortest Path:")
        for row, col in path:
            print(f"({row}, {col})")
    else:
        print("No path found.")
